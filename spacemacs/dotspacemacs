;; -*- mode: emacs-lisp -*-
; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
  You should not put any user code in this function besides
  modifying the variable values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/.spacemacs.d/layers/")
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
	 go
	 ;; ----------------------------------------------------------------
	 ;; Example of useful layers you may want to use right away.
	 ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
	 ;; <M-m f e R> (Emacs style) to install them.
	 ;; ----------------------------------------------------------------
	 asm
	 (auto-completion :variables
					  auto-completion-enable-help-tooltip t
					  )
	 better-defaults
	 (c-c++ :variables
			c-c++-enable-clang-support t
			c-c++-default-mode-for-headers 'c++-mode
			)
	 clojure
	 common-lisp
	 coq
	 csv
	 dash
	 (elfeed :variables
			 rmh-get information elfeed-org-files (list "~/spacemacs/elfeed.org")
			 elfeed-enable-web-interface t
			 )
	 emacs-lisp
	 games
	 git
	 github
	 html
	 (haskell :variables
			  haskell-completion-backend 'intero
			  haskell-enable-hindent-style "johan-tibell"
			  )
	 helm
	 (ibuffer :variables
        ibuffer-group-buffers-by 'projects
        )
	 java
	 javascript
	 latex
	 markdown
	 (mu4e :variables
        mu4e-account-alist t
        mu4e-enable-notifications t
        mu4e-installation-path "/usr/share/emacs/site-lisp/mu4e"
        mu4e-enable-mode-line t
        )
	 ocaml
	 (org :variables
  		  org-enable-github-support t
	      )
	 pdf-tools
	 php
	 python
	 rust
	 scheme
	 (shell :variables
			  shell-default-shell 'term
  			shell-default-term-shell "/usr/sbin/zsh"
	  		shell-default-height 50
		  	shell-default-position 'bottom
        )
	 selectric
	 semantic
	 (spell-checking :variables
					 enable-flyspell-auto-completion t)
	 syntax-checking
	 version-control
	 vimscript
	 xkcd
	 yaml
	 )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(
									  nord-theme
									  editorconfig
									  helm-cscope
									  material-theme
									  gruvbox-theme
									  minimal-theme
									  doom-themes
									  monokai-theme
									  nyan-mode
									  pkgbuild-mode
									  bison-mode
									  darkroom
									  sicp
									  )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update t
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
								(projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'org-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(
                         doom-peacock
                         nord
                         minimal
                         gruvbox
                         monokai
                         spacemacs-dark
                         spacemacs-light
                         )
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Go Mono"
                               :size 14
                               :width normal
                               :powerline-scale 1.0)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts t
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers t
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
  It is called immediately after `dotspacemacs/init', before
  layer configuration executes.  This function is mostly useful
  for variables that need to be set before packages are loaded.
  If you are unsure, you should try in setting them in
  `dotspacemacs/user-config' first."
  (setq evil-want-abbrev-expand-on-insert-exit nil)
  (setq-default evil-escape-key-sequence "kj")
  (setq nord-comment-brightness 14)
  (setq nord-region-highlight "snowstorm")
  )

(defun dotspacemacs/user-config ()
  "CONFIGURATION function for user code.
	This function is called at the very end of Spacemacs
	initialization after layers configuration.  This is the place
	where most of your configurations should be done.  Unless it
	is explicitly specified that a variable should be set before
	a package is loaded, you should place your code here."
  ;; Mine
  (add-to-list 'load-path "/home/soorya/spacemacs")
  ;; (load-theme 'nord t)
  ;; show line numbers
  ;; (global-linum-mode t)
  ;; UTF-8
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-locale-environment "en.utf-8")
  (prefer-coding-system 'utf-8)
  ;; (setq utf-translate-cjk-mode nil) ; disable cjk coding/encoding

  (setq evil-want-fine-undo t)
  ;; Alt + Up/Down to move block of selected text up/down
  (require 'move-text)
  (require 'darkroom)
  (require 'writeroom-mode)
  (move-text-default-bindings)
  ;; (menu-bar-mode t)
  (global-set-key (kbd "M-f")
                  'menu-bar-open)
  (setq-default neo-theme 'arrow)
  (setq-default whitespace-line-column 80
                whitespace-style
                '(face lines-tail))
  ;; Copy, paste And cut
  (global-set-key (kbd "C-x c") 'clipboard-kill-ring-save)
  (global-set-key (kbd "C-x p") 'clipboard-yank)
  (global-set-key (kbd "C-x x") 'clipboard-kill-region)
  ;; delete line
  (global-set-key (kbd "<delete>")
                  'delete-region)
  ;; terminal
  ;; (setq system-uses-terminfo nil)
  ;; C/C++ mode customizations
  (global-set-key (kbd "C-x b") 'clang-format-buffer)
  (setq indent-line-function 'insert-tab)
  ;; Text scaling
  (define-key global-map (kbd "C-+") 'text-scale-increase)
  (define-key global-map (kbd "C-=") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
  ;; Smooth Scrolling attempt
  (setq mouse-wheel-scroll-amount '(1
                                    ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  ;; (require 'sublimity)
  ;; (require 'sublimity-scroll)
  ;; (sublimity-mode 1)
  ;; (setq sublimity-scroll-weight 2 sublimity-scroll-drift-length
  ;;       5)
  ;; make these keys behave like normal browser
  (defun webkit-setup ()
    (define-key xwidget-webkit-mode-map (kbd "<mouse-4>")
    'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map (kbd "<mouse-5>")
    'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd "<up>")
    'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map (kbd "<down>")
    'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd "M-w")
    'xwidget-webkit-copy-selection-as-kill)
    (define-key xwidget-webkit-mode-map (kbd "C-c")
    'xwidget-webkit-copy-selection-as-kill))
  (add-hook 'xwidget-webkit-mode-hook 'webkit-setup)
  (defun c++-setup ()
    (setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                                    64 68 72 76 80 84 88 92)
                  indent-tabs-mode t
                  tab-width 4
                  fill-column 72))
  (add-hook 'c++-mode-hook 'c++-setup)
  (add-hook 'c-mode-hook 'c++-setup)
  (nyan-mode t)
  ;; (setq-default org-bullets-bullet-list '("" "" "▲" "▶"))
  (global-set-key (kbd "<C-down>")
                  'shrink-window)
  (global-set-key (kbd "<C-up>")
                  'enlarge-window)
  (global-set-key (kbd "<C-right>")
                  'shrink-window-horizontally)
  (global-set-key (kbd "<C-left>")
                  'enlarge-window-horizontally)
  (setq-default projectile-indexing-method 'alien)
  (setq-default projectile-enable-caching t)

  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))
  ;; default

  ;; don't save message to Sent Messages, GMail/IMAP will take care of this
  ;; (setq mu4e-sent-messages-behavior 'delete)
  ;; (setq-default mu4e-maildir "~/Maildir")
  ;; ;; setup some handy shortcuts

  ;; (setq mail-user-agent 'mu4e-user-agent)
  ;; ;; allow for updating mail using 'U' in the main view:
  ;; (setq-default mu4e-get-mail-command "offlineimap")
  ;; (setq user-full-name "J M Soorya Narayan"
  ;;       smtpmail-smtp-server
  ;;       "smtp.gmail.com"
  ;;       smtpmail-default-smtp-server
  ;;       "smtp.gmail.com"
  ;;       smtpmthan ail-starttls-credentials
  ;;       '(("smtp.gmail.com" 587 nil nil))
  ;;       smtpmail-stream-type
  ;;       'starttls
  ;;       ;; mu4e-sent-messages-behavior delete
  ;;       smtpmail-smtp-service
  ;;       587)
  ;; (setq-default mu4e-account-alist '(("Personal"
  ;;                             (mu4e-sent-folder "/Personal/[Gmail].Sent Mail")
  ;;                             (mu4e-drafts-folder "/Personal/[Gmail].Drafts")
  ;;                             (mu4e-trash-folder "/Personal/[Gmail].Trash")
  ;;                             (user-mail-address "soorya.art@gmail.com")
  ;;                             (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "soorya.art@gmail.com"
  ;;                                                           nil))))
  ;;                            ("Professional"
  ;;                             (mu4e-sent-folder "/Professional/[Gmail].Sent Mail")
  ;;                             (mu4e-drafts-folder "/Professional/[Gmail].Drafts")
  ;;                             (mu4e-trash-folder "/Professional/[Gmail].Trash")
  ;;                             (user-mail-address "soorya.narayan.jm@gmail.com")
  ;;                             (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "soorya.narayan.jm@gmail.com"
  ;;                                                           nil))))
  ;;                            ("Dev"
  ;;                             (mu4e-sent-folder "/Dev/[Gmail].Sent Mail")
  ;;                             (mu4e-drafts-folder "/Dev/[Gmail].Drafts")
  ;;                             (mu4e-trash-folder "/Dev/[Gmail].Trash")
  ;;                             (user-mail-address "nayaran.ayroos@gmail.com")
  ;;                             (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "nayaran.ayroos@gmail.com"
  ;;                                                           nil))))))
  ;; (mu4e/mail-account-reset)
  ;; (defun my-mu4e-set-account ()
  ;;   "Set the account for composing a message."
  ;;   (let* ((account (if mu4e-compose-parent-message
  ;;                       (let ((maildir (mu4e-message-field mu4e-compose-parent-message
  ;;                                                          :maildir)))
  ;;                         (string-match "/\\(.*?\\)/" maildir)
  ;;                         (match-string 1 maildir))
  ;;                     (completing-read (format "Compose with account: (%s) "
  ;;                                              (mapconcat #'(lambda (var)
  ;;                                                             (car var))
  ;;                                                         mu4e-account-alist
  ;;                                                         "/"))
  ;;                                      (mapcar #'(lambda (var)
  ;;                                                  (car var))
  ;;                                              mu4e-account-alist)
  ;;                                      nil
  ;;                                      t
  ;;                                      nil
  ;;                                      nil
  ;;                                      (caar mu4e-account-alist))))
  ;;          (account-vars (cdr (assoc account mu4e-account-alist))))
  ;;     (if account-vars
  ;;         (mapc #'(lambda (var)
  ;;                   (set (car var)
  ;;                        (cadr var)))
  ;;               account-vars)
  ;;       (error "No email account found"))))
  ;; (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
  ;; (require 'smtpmail)
  ;; ;; (setq message-send-mail-function 'smtpmail-send-it
  ;;       starttls-use-gnutls t)
  ;; (setq-default message-kill-buffer-on-exit t)
  ;; (with-eval-after-load 'mu4e-alert
  ;;   ;; Enable Desktop notifications
  ;;   (mu4e-alert-set-default-style 'notifications))
  ;; (defun my-render-html-message ()
  ;;   (let ((dom (libxml-parse-html-region (point-min)
  ;;                                        (point-max))))
  ;;     (erase-buffer)
  ;;     (shr-insert-document dom)
  ;;     (goto-char (point-min))))
  ;; (setq-default mu4e-html2text-command 'my-render-html-message)

)

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   ["#0d0d0d" "#cc6666" "#b5bd68" "#f0c674" "#81a2be" "#c9b4cf" "#8abeb7" "#ffffff"])
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-enabled-themes (quote (doom-peacock)))
 '(custom-safe-themes
   (quote
    ("3e335d794ed3030fefd0dbd7ff2d3555e29481fe4bbb0106ea11c660d6001767" "554b7f0439155d6eb648d4837ef03902f51124cacee021217e76f39e9dd314c2" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "7c49651e62ee04b5f6d8fca78bca6f31730d982901fc1e1c651e464fa0ecfea4" "77bddca0879cb3b0ecdf071d9635c818827c57d69164291cb27268ae324efa84" "d0404bd38534a00ee72a4f887a987d6bff87f4cf8d8f85149e32849b262465a5" "a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" "c63a789fa2c6597da31f73d62b8e7fad52c9420784e6ec34701ae8e8f00071f6" "a7e7804313dbf827a441c86a8109ef5b64b03011383322cbdbf646eb02692f76" "8e4efc4bed89c4e67167fdabff77102abeb0b1c203953de1e6ab4d2e3a02939a" "858a353233c58b69dbe3a06087fc08905df2d8755a0921ad4c407865f17ab52f" "c4bd8fa17f1f1fc088a1153ca676b1e6abc55005e72809ad3aeffb74bd121d23" "8ed752276957903a270c797c4ab52931199806ccd9f0c3bb77f6f4b9e71b9272" "9f569b5e066dd6ca90b3578ff46659bc09a8764e81adf6265626d7dc0fac2a64" "5900bec889f57284356b8216a68580bfa6ece73a6767dfd60196e56d050619bc" "d507c9e58cb0eb8508e15c8fedc2d4e0b119123fab0546c5fd30cadd3705ac86" "2b6bd2ebad907ee42b3ffefa4831f348e3652ea8245570cdda67f0034f07db93" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "b81bfd85aed18e4341dbf4d461ed42d75ec78820a60ce86730fc17fc949389b2" "365d9553de0e0d658af60cff7b8f891ca185a2d7ba3fc6d29aadba69f5194c7f" "12e2aee98f651031d10fd58af76250fa8cab6f28b3e88f03b88b7524c9278549" "cc0dbb53a10215b696d391a90de635ba1699072745bf653b53774706999208e3" "611e38c2deae6dcda8c5ac9dd903a356c5de5b62477469133c89b2785eb7a14d" default)))
 '(evil-want-Y-yank-to-eol t)
 '(fci-rule-color "#5c5e5e" t)
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#3C3D37" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#3C3D37" . 100))))
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(hl-sexp-background-color "#1c1f26")
 '(jdee-db-active-breakpoint-face-colors (cons "#0d0d0d" "#41728e"))
 '(jdee-db-requested-breakpoint-face-colors (cons "#0d0d0d" "#b5bd68"))
 '(jdee-db-spec-breakpoint-face-colors (cons "#0d0d0d" "#5a5b5a"))
 '(magit-diff-use-overlays nil)
 '(nrepl-message-colors
   (quote
    ("#dc322f" "#cb4b16" "#b58900" "#546E00" "#B4C342" "#00629D" "#2aa198" "#d33682" "#6c71c4")))
 '(org-ellipsis "  ")
 '(org-fontify-done-headline t)
 '(org-fontify-quote-and-verse-blocks t)
 '(org-fontify-whole-heading-line t)
 '(package-selected-packages
   (quote
    (xcscope darkroom olivetti writeroom-mode dired-ranger md4rd company-coq company-math math-symbol-lists org-mime doom-peacock-theme helm-cscope editorconfig czech-holidays go-guru go-eldoc company-go go-mode clippy kotlin-mode paredit bind-key auctex flyspell-correct gh ghub let-alist pythonic f csv-mode nord-theme solarized-theme geiser key-chord php+-mode phpunit phpcbf php-extras php-auto-yasnippets drupal-mode php-mode caml org-category-capture all-the-icons packed avy inflections cider queue clojure-mode multiple-cursors anaconda-mode eclim tern powerline elfeed iedit smartparens evil goto-chg flycheck haskell-mode yasnippet helm helm-core projectile marshal ht markdown-mode alert org-plus-contrib magit magit-popup git-commit with-editor async dash-functional hydra rust-mode haml-mode js2-mode simple-httpd company slime dash s bison-mode flex-compile meghanada doom-tomorrow-night-theme doxygen dired-quick-sort zeal-at-point yapfify yaml-mode xterm-color xkcd x86-lookup ws-butler winum which-key web-mode web-beautify volatile-highlights vimrc-mode vi-tilde-fringe uuidgen utop use-package unfill typit tuareg toml-mode toc-org tagedit sudoku stickyfunc-enhance srefactor spaceline smeargle slime-company slim-mode sicp shell-pop selectric-mode scss-mode sass-mode restart-emacs rainbow-delimiters racer pyvenv pytest pyenv-mode py-isort pug-mode pkgbuild-mode pip-requirements persp-mode pdf-tools pcre2el paradox pacmacs ox-gfm orgit org-projectile org-present org-pomodoro org-download org-bullets open-junk-file ocp-indent nyan-mode neotree nasm-mode mwim multi-term mu4e-maildirs-extension mu4e-alert move-text monokai-theme mmm-mode minimal-theme merlin material-theme markdown-toc magit-gitflow magit-gh-pulls lorem-ipsum livid-mode live-py-mode linum-relative link-hint less-css-mode json-mode js2-refactor js-doc intero info+ indent-guide ibuffer-projectile hy-mode hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation hide-comnt help-fns+ helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-gitignore helm-flx helm-descbinds helm-dash helm-css-scss helm-company helm-c-yasnippet helm-ag haskell-snippets gruvbox-theme google-translate golden-ratio gnuplot github-search github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gist gh-md fuzzy flyspell-popup flyspell-correct-helm flycheck-rust flycheck-pos-tip flycheck-haskell flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eshell-z eshell-prompt-extras esh-help emmet-mode elisp-slime-nav elfeed-web elfeed-org elfeed-goodies dumb-jump doom-themes disaster diff-hl define-word dactyl-mode cython-mode company-web company-tern company-statistics company-quickhelp company-ghci company-ghc company-emacs-eclim company-cabal company-c-headers company-auctex company-anaconda common-lisp-snippets column-enforce-mode coffee-mode cmm-mode cmake-mode clojure-snippets clj-refactor clean-aindent-mode clang-format cider-eval-sexp-fu cargo auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile auctex-latexmk aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line ac-ispell 2048-game)))
 '(pos-tip-background-color "#FFFACE")
 '(pos-tip-foreground-color "#272822")
 '(safe-local-variable-values
   (quote
    ((buffer-file-coding-system . utf-8-unix)
     (helm-make-build-dir . "build/")
     (helm-make-build-dir . "build2"))))
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(vc-annotate-background "#0d0d0d")
 '(vc-annotate-background-mode nil)
 '(vc-annotate-color-map
   (list
    (cons 20 "#b5bd68")
    (cons 40 "#ffff00")
    (cons 60 "#ffff00")
    (cons 80 "#f0c674")
    (cons 100 "#ffff00")
    (cons 120 "#ffff00")
    (cons 140 "#de935f")
    (cons 160 "#ffff55")
    (cons 180 "#ffffaa")
    (cons 200 "#c9b4cf")
    (cons 220 "#ffaaaa")
    (cons 240 "#ff5555")
    (cons 260 "#cc6666")
    (cons 280 "#bf0000")
    (cons 300 "#7f0000")
    (cons 320 "#3f0000")
    (cons 340 "#5c5e5e")
    (cons 360 "#5c5e5e")))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list
   (unspecified "#272822" "#3C3D37" "#F70057" "#F92672" "#86C30D" "#A6E22E" "#BEB244" "#E6DB74" "#40CAE4" "#66D9EF" "#FB35EA" "#FD5FF0" "#74DBCD" "#A1EFE4" "#F8F8F2" "#F8F8F0"))
 '(xterm-color-names
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#eee8d5"])
 '(xterm-color-names-bright
   ["#002b36" "#cb4b16" "#586e75" "#657b83" "#839496" "#6c71c4" "#93a1a1" "#fdf6e3"]))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(proof-eager-annotation-face ((t (:background "medium blue"))))
 '(proof-error-face ((t (:background "dark red"))))
 '(proof-warning-face ((t (:background "indianred3")))))
